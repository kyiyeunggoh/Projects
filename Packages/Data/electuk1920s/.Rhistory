library(devtools)
library(roxygen2)
library(testthat)
devtools::document()
devtools::document()
??get_latlong
devtools::document()
length(read_html(url)%>%
html_nodes(.,css=".inner")%>%
as.list(.))
library(httr)
length(read_html(url)%>%
html_nodes(.,css=".inner")%>%
as.list(.))
library(RJSONIO)
length(read_html(url)%>%
html_nodes(.,css=".inner")%>%
as.list(.))
library(rvest)
length(read_html(url)%>%
html_nodes(.,css=".inner")%>%
as.list(.))
url<-"http://www.politicsresources.net/area/uk/ge1924/i01.html"
length(read_html(url)%>%
html_nodes(.,css=".inner")%>%
as.list(.))
devtools::install_github("ongzuchengmark/holidayplanneR")
isitholiday()
library(holidayplanneR)
isitholiday()
devtools::use_package("nlme")
usethis::use_package("nlme")
#' @export
#' @example
#' polres_scrape("http://www.politicsresources.net/area/uk/ge1924/i01.html")
#'
#' @name get_latlong
#' @param area Provide an area name for the function to retrieve data.
#' @keywords longitude, latitude, geographical data
#' @export
#' @example
#' get_latlong("Columbia University, New York")
usethis::use_package("tidyverse")
usethis::use_package("data.table")
usethis::use_package("car")
usethis::use_package("tidyr")
usethis::use_package("dplyr")
readRDS(file.choose())
electiondata<-readRDS(file.choose())
electiondata
View(electiondata)
View(electiondata)
# Creating loop to extract 1922 data
get_1922ukwikielection<-function(url){
datalist=list()
for (i in 2:261) {
url<-"https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election"
wiki<- read_html(url)
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist[[i]]<-results
}
}
# Creating loop to extract 1922 data
get_1922ukwikielection<-function(url){
datalist=list()
for (i in 2:261) {
wiki<- read_html(url)
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist[[i]]<-results
}
}
# Creating loop to extract 1923 data
get_1922ukwikielection<-function(url){
datalist1=list()
for (i in 2:588) {
url<-"https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1923_United_Kingdom_general_election"
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist1[[i]]<-results
}
}
# Creating loop to extract 1922 data// where URL = ("https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election")
get_1922ukwikielection<-function(url){
datalist=list()
for (i in 2:261) {
wiki<- read_html(url)
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist[[i]]<-results
}
}
# Creating loop to extract 1929 data, where URL = "https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1929_United_Kingdom_general_election"
get_1929ukwikielection<-function(url){
datalist2=list()
for (i in 2:588) {
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist2[[i]]<-results
}
}
# Creating loop to extract 1922 data// where URL = ("https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election")
get_1922ukwikielection<-function("https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election"){
datalist=list()
for (i in 2:261) {
wiki<- read_html(url)
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist[[i]]<-results
}
}
get_1922ukwikielection("https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election")
library(stringr)
get_1922ukwikielection("https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election")
a<-get_1922ukwikielection("https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election")
View(wiki)
election1920sdb<-function(df){df%>%
select(Year, Constituency, Party.1, Candidate, Votes, X., lat, lng)%>%
arrange(Year)}
library(tidyr)
election1920sdb<-function(df){
library(tidyr)
df%>%
select(Year, Constituency, Party.1, Candidate, Votes, X., lat, lng)%>%
arrange(Year)}
electiondb<-read_csv(file.choose(.))
library(readr)
electiondb<-read_csv(file.choose(.))
electiondb<-read_csv(file.choose(.))
data <- read_csv("~/Downloads/Goh_KyiYeung/Final Project/1920_electiondata.csv")
View(data)
View(data)
df%>%
select(Year, Constituency, Party.1, Candidate, Votes, X1)%>%
arrange(Year)}
df%>%
select(Year, Constituency, Party.1, Candidate, Votes, X1)%>%
arrange(Year)}
df%>%
select(Year, Constituency, Party.1, Candidate, Votes, X1)}
usethis::use_package(" magrittr ")
#' @export
#' @example
#' polres_scrape("http://www.politicsresources.net/area/uk/ge1924/i01.html")
#'
#' @name get_latlong
#' @param area Provide an area name for the function to retrieve data.
#' @keywords longitude, latitude, geographical data
#' @export
#' @example
#' get_latlong("Columbia University, New York")
install.packages("magrittr")
install.packages("magrittr")
usethis::use_package("magrittr")
library(magrittr)
df%>%
select(Year, Constituency, Party.1, Candidate, Votes, X1)%>%
arrange(Year)}
(df)%>%
select(Year, Constituency, Party.1, Candidate, Votes, X1)%>%
arrange(Year)}
testdata<-data%>%
select(Percentages="X.",Votes="Votes")
#The most number of votes won by a candidate was 101 550 votes.
library(tidyr)
testdata<-data%>%
select(Percentages="X.",Votes="Votes")
library(dplyr)
testdata<-data%>%
select(Percentages="X.",Votes="Votes")
View(data)
testdata<-data%>%
select(Percentages="X1",Votes="Votes")
View(electiondata)
testdata<-data%>%
select(Percentages="X1",Votes="Votes")%>%
arrange(Percentages)
devtools::use_data(election1920sdb)
usethis::use_data(election1920sdb)
load("/Users/pyeungyeung/Desktop/electuk1920s/data/election1920sdb.rda")
load("/Users/pyeungyeung/Desktop/electuk1920s/data/election1920sdb.rda")
readRDS(file.choose(.))
RDS<-readRDS(file.choose(.))
#The most number of votes won by a candidate was 101 550 votes.
read_rds(file.choose(.))
#The most number of votes won by a candidate was 101 550 votes.
read_rds(file.choose("/Users/pyeungyeung/Desktop/electuk1920s/data/election1920sdb.rda"))
library(rvest)
library(plyr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(stringr)
library(xml2)
library(httr)
library(data.table)
library(XML)
library(httr)
library(rebus)
library(RJSONIO)
library(googleway)
library(gtools)
library(ggmap)
library(foreach)
library(reshape)
# Creating loop to extract 1922 data
datalist=list()
for (i in 2:261) {
url<-"https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election"
wiki<- read_html(url)
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist[[i]]<-results
}
election_1922= do.call(rbind, datalist)
# Creating loop to extract 1923 data
datalist1=list()
for (i in 2:588) {
url<-"https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1923_United_Kingdom_general_election"
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist1[[i]]<-results
}
election_1923= do.call(rbind, datalist1)
# Creating loop to extract 1929 data
datalist2=list()
for (i in 2:588) {
url<-"https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1929_United_Kingdom_general_election"
wiki<-read_html(url)
table<-html_nodes(wiki,css=".wikitable")[i]
pagename_head<-'//*[@id="mw-content-text"]/div/table/caption'
pagename_year<-'//*[@id="firstHeading"]'
table_head<-html_nodes(wiki,xpath=pagename_head)[i]
table_year<-html_nodes(wiki,xpath=pagename_year)
results<-(html_table(table, fill=TRUE))[[1]]
constituency<-as.character(str_extract(html_text(table_head), "^[a-zA-Z]+"))
year<-as.numeric(str_extract(html_text(table_year), "(\\d)+"))
results['Constituency']=constituency
results['Year']=year
datalist2[[i]]<-results
}
election_1929= rbindlist(datalist2, fill=TRUE)
election_1929<-subset(election_1929, select=c(1:8))%>%
as.data.frame(.)
##NOTE: Function can be written but much faster to extract given that the structure of each page is different
##Hence, manual inspection of the xpaths are needed. I start at 2 because 1 is blank and end at 588 before
##data on university elections which are not relevant for our project. However, data from our second source,
##is far more amenable to extraction via a function and I have created one after testing it on a loop.
# Unfilled data from politics resources (1924 onwards) - for 1 page [TRIAL USING A FOR LOOP]
datalist3<-list()
for (i in 1:length(numlist)){
url_rem<-"http://www.politicsresources.net/area/uk/ge1924/i01.html"
remwiki<-read_html(url_rem)
numlist<-html_nodes(remwiki, css=".inner")%>%
as.list(.)
tablerem<-html_nodes(remwiki, css=".inner")[i]
pagename_head<-html_nodes(remwiki,css=".constname")[i]
table_year<-as.numeric(str_extract(html_text(remwiki,'/html/body/h1'),"(\\d)+"))
results<-as.data.frame(html_table(tablerem, fill=TRUE))
constituency<-html_text(pagename_head)
year<-table_year
results["Constituency"]=as.character(constituency)
results['Year']=as.numeric(year)
results
datalist3[[i]]<-results
}
# Function to extract based on URL rather than manually keying 14 times of those pages for this website
polres_scrape<-function(url){
library(tidyverse)
library(stringr)
library(rvest)
listofdata<-list()
numlist<-read_html(url)%>%
html_nodes(.,css=".inner")%>%
as.list(.)
for (i in 1:length(numlist)) {
remwiki<-read_html(url)
tablerem<-html_nodes(remwiki, css=".inner")[i]
pagename_head<-html_nodes(remwiki,css=".constname")[i]
table_year<-as.numeric(str_extract(html_text(remwiki,'/html/body/h1'),"(\\d)+"))
results<-as.data.frame(html_table(tablerem, fill=TRUE))
constituency<-html_text(pagename_head)
year<-table_year
results["Constituency"]=as.character(constituency)
results['Year']=as.numeric(year)
results
listofdata[[i]]<-results
}
return(listofdata)
}
d1<-polres_scrape("http://www.politicsresources.net/area/uk/ge1924/i01.html")
d2<-polres_scrape("http://www.politicsresources.net/area/uk/ge1924/i02.html")
d3<-polres_scrape("http://www.politicsresources.net/area/uk/ge1924/i03.html")
d4<-polres_scrape("http://www.politicsresources.net/area/uk/ge1924/i04.html")
devtools::use_data(election1920sdb)
usethis::use_data(election1920sdb)
devtools::use_data(election1920sdb)
election1920sdb <- readRDS("~/Desktop/electuk1920s/data/election1920sdb.rds")
View(election1920sdb)
??electuk1920s
??get_latlong
devtools::use_vignette("my-vignette")
use_readme_rmd()
devtools::use_data(election1920sdb)
devtools::document()
library(testthat)
library(roxygen2)
library(devtools)
has_devel()
has_devel(TRUE)
devtools::load_all()
devtools::load_all()
usethis::use_package(rvest)
usethis::use_package("rvest")
usethis::use_package("xml2")
devtools::load_all()
url<-"https://en.wikipedia.org/wiki/Constituency_election_results_in_the_1922_United_Kingdom_general_election"
wiki<-read_html(url)
library(rvest)
library(xml2)
wiki<-read_html(url)
wiki<-html(url)
wiki<-read_html(url)
library(rvest)
library(plyr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(stringr)
library(xml2)
library(httr)
library(data.table)
library(XML)
library(httr)
library(rebus)
library(RJSONIO)
library(googleway)
library(gtools)
library(ggmap)
library(foreach)
library(reshape)
devtools::load_all()
`overwrite = TRUE`
overwrite = TRUE
devtools::load_all()
library(rvest)
library(plyr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(stringr)
library(xml2)
library(httr)
library(data.table)
library(XML)
library(httr)
library(rebus)
library(RJSONIO)
library(googleway)
library(gtools)
library(ggmap)
library(foreach)
library(reshape)
devtools::load_all()
st
devtools::document()
library(rvest)
library(plyr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(stringr)
library(xml2)
library(httr)
library(data.table)
library(XML)
library(httr)
library(rebus)
library(RJSONIO)
library(googleway)
library(gtools)
library(ggmap)
library(foreach)
library(reshape)
devtools::load_all(".")
install.packages("electuk1920s")
devtools::document()
library(rvest)
library(plyr)
library(dplyr)
library(tidyverse)
library(kableExtra)
library(stringr)
library(xml2)
library(httr)
library(data.table)
library(XML)
library(httr)
library(rebus)
library(RJSONIO)
library(googleway)
library(gtools)
library(ggmap)
library(foreach)
library(reshape)
devtools::document()
??get_latlong
??polres_scrape
??electuk1920s
??get_latlong
election1920sdb <- readRDS("~/Desktop/electuk1920s/data/election1920sdb.rds")
View(election1920sdb)
library(electuk1920s)
library(electuk1920s)
